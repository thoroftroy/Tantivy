import os
import random
from PIL import Image, ImageDraw, ImageFont
from noise import pnoise2

# Constants
TILE_WIDTH = 64
TILE_HEIGHT = 64
MAP_WIDTH = 100
MAP_HEIGHT = 50
PERLIN_SCALE = 0.1
CITY_TILE = 'hexCity.png'
CITY_NAMES = [
    "Aetherfall", "Bramblehold", "Cloudmere", "Duskreach", "Emberdeep",
    "Frosthaven", "Glimmerfen", "Hollowspire", "Ironroot", "Jadefort"
]

# Load and scale sprites
sprite_folder = "sprites"
sprites = ['hexBlue.png', 'hexDarkGreen.png', 'hexGray.png', 'hexGreen.png']
city_image = Image.open(os.path.join(sprite_folder, CITY_TILE)).convert("RGBA").resize((TILE_WIDTH, TILE_HEIGHT), Image.Resampling.LANCZOS)
sprite_images = {
    name: Image.open(os.path.join(sprite_folder, name)).convert("RGBA").resize((TILE_WIDTH, TILE_HEIGHT), Image.Resampling.LANCZOS)
    for name in sprites
}

# Create output image
output_width = int(3/4 * TILE_WIDTH * MAP_WIDTH + TILE_WIDTH / 4)
output_height = int(TILE_HEIGHT * MAP_HEIGHT + TILE_HEIGHT / 2)
map_image = Image.new("RGBA", (output_width, output_height))

# Generate Perlin noise map
noise_map = [[pnoise2(x * PERLIN_SCALE, y * PERLIN_SCALE, octaves=3) for x in range(MAP_WIDTH)] for y in range(MAP_HEIGHT)]

# Determine city locations
all_coords = [(x, y) for y in range(MAP_HEIGHT) for x in range(MAP_WIDTH)]
random.shuffle(all_coords)
city_coords = sorted(all_coords[:10], key=lambda xy: noise_map[xy[1]][xy[0]], reverse=True)
city_name_map = {coord: name for coord, name in zip(city_coords, CITY_NAMES)}

# Tile weights for noise value ranges
# Mapping noise ranges to tile types

def choose_tile(noise_val):
    if noise_val > 0.5:
        return 'hexDarkGreen.png'
    elif noise_val > 0.2:
        return 'hexDarkGreen.png'
    elif noise_val > 0.1:
        return 'hexGray.png'
    elif noise_val > 0.05:
        return 'hexBlue.png'
    else:
        return 'hexGreen.png'

# Draw map
def draw_hex_tile(image, tile, x, y, rotation=0):
    tile = tile.copy().rotate(rotation, expand=False)
    tile = tile.resize((TILE_WIDTH, TILE_HEIGHT), Image.Resampling.LANCZOS)
    px = int(x * 3/4 * TILE_WIDTH)
    py = int(y * TILE_HEIGHT + (TILE_HEIGHT / 2 if x % 2 else 0))
    image.alpha_composite(tile, (px, py))

def draw_city_tile(image, tile, x, y, name):
    tile = tile.copy()
    draw = ImageDraw.Draw(tile)
    font = ImageFont.load_default()
    bbox = draw.textbbox((0, 0), name, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    draw.text(((TILE_WIDTH - text_width) / 2, (TILE_HEIGHT - text_height) / 2), name, fill="white", font=font)
    draw_hex_tile(image, tile, x, y)

for y in range(MAP_HEIGHT):
    for x in range(MAP_WIDTH):
        coord = (x, y)
        if coord in city_name_map:
            name = city_name_map[coord]
            print(f"Placing city '{name}' at {coord}")
            draw_city_tile(map_image, city_image, x, y, name)
        else:
            noise_val = noise_map[y][x]
            sprite_name = choose_tile(noise_val)
            tile_image = sprite_images[sprite_name].copy()
            rotation = random.choice([0, 60, 120, 180, 240, 300])
            draw_hex_tile(map_image, tile_image, x, y, rotation)

# Save map
map_image.save("hex_map.png")
print("Map saved to 'hex_map.png")
